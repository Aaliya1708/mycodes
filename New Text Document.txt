#include<bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    node* left;
    node *right;
};
node* newnode(int data)
{
    node *n=new node();
    n->data=data;
    n->left=NULL;
    n->right=NULL;
}
node *insertt(node* root,int data)
{
    if(root==NULL)
    {
        root=newnode(data);
        return root;
    }
    else if(root->data>=data)
    {
        root->left=insertt(root->left,data);
        return root;
    }
    else
    {
        root->right=insertt(root->right,data);
        return root;
    }

}
int searchh(node *root,int data)
{
    if(root==NULL)
        return 0;
    else if(root->data==data)
        return 1;
    else if(root->data>data)
        searchh(root->left,data);
    else
        searchh(root->right,data);
}
node* minvalue(node* root)
{
    node *temp=root;
    while(temp!=NULL && temp->left!=NULL)
        temp=temp->left;
    return temp;
}
node * deletee(node*root,int data)
{
    if(root==NULL)
        return root;
    else if(root->data>data)
        root->left=deletee(root->left,data);
    else if(root->data<data)
        root->right=deletee(root->right,data);
    else
    {
        if(root->left==NULL){
        node*temp=root->right;
        free(root);
        return temp;
        }
        else if(root->right==NULL){
            node*temp=root->left;
        free(root);
        return temp;
        }
        node *temp=minvalue(root->right);
        temp->data=root->data;
        root->right=deletee(root->right,temp->data);
    }
    return root;
}
int main()
{

    node *root=NULL;
    root=insertt(root,15);
    root=insertt(root,10);
    root=insertt(root,7);
    root=insertt(root,5);
    root=insertt(root,3);
        deletee(root,10);
        if(searchh(root,10)==1)
        cout<< 1;
    else
        cout << 0;
        return 0;
}